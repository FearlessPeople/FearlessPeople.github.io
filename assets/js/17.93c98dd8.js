(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{456:function(a,t,e){"use strict";e.r(t);var r=e(10),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#api分层"}},[a._v("API分层")]),e("ul",[e("li",[e("a",{attrs:{href:"#stateful-stream-processing"}},[a._v("Stateful Stream Processing")])]),e("li",[e("a",{attrs:{href:"#datastream-dataset-api"}},[a._v("DataStream / DataSet API")])]),e("li",[e("a",{attrs:{href:"#table-api"}},[a._v("Table API")])]),e("li",[e("a",{attrs:{href:"#sql"}},[a._v("SQL")])])])]),e("li",[e("a",{attrs:{href:"#常用api"}},[a._v("常用API")]),e("ul",[e("li",[e("a",{attrs:{href:"#stream-api"}},[a._v("Stream API")])]),e("li",[e("a",{attrs:{href:"#batch-api"}},[a._v("Batch API")])]),e("li",[e("a",{attrs:{href:"#window-api"}},[a._v("Window API")])]),e("li",[e("a",{attrs:{href:"#table-api"}},[a._v("Table API")])])])])])]),e("p"),a._v(" "),e("p",[a._v("Flink中提供了3个组件，包括DataSource、Transformation和DataSink。")]),a._v(" "),e("ul",[e("li",[a._v("DataSource：表示数据源组件，主要用来接收数据，目前官网提供了readTextFile、socketTextStream、fromCollection以及一些第三方的Source。")]),a._v(" "),e("li",[a._v("Transformation：表示算子，主要用来对数据进行处理，比如Map、FlatMap、Filter、Reduce、Aggregation等。")]),a._v(" "),e("li",[a._v("DataSink：表示输出组件，主要用来把计算的结果输出到其他存储介质中，比如writeAsText以及Kafka、Redis、Elasticsearch等第三方Sink组件。因此，想要组装一个Flink Job，至少需要这3个组件。")])]),a._v(" "),e("h2",{attrs:{id:"api分层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api分层"}},[a._v("#")]),a._v(" API分层")]),a._v(" "),e("p",[a._v("Flink 为流式/批式处理应用程序的开发提供了不同级别的抽象。\n"),e("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNly1gvaavlvzncj61k40u0gvq02.jpg",alt:""}})]),a._v(" "),e("h3",{attrs:{id:"stateful-stream-processing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stateful-stream-processing"}},[a._v("#")]),a._v(" Stateful Stream Processing")]),a._v(" "),e("p",[a._v("Flink API 最底层的抽象为有状态实时流处理。其抽象实现是 Process Function，并且 Process Function 被 Flink 框架集成到了 DataStream API 中来为我们使用。它允许用户在应用程序中自由地处理来自单流或多流的事件（数据），并提供具有全局一致性和容错保障的状态。此外，用户可以在此层抽象中注册事件时间（event time）和处理时间（processing time）回调方法，从而允许程序可以实现复杂计算。")]),a._v(" "),e("h3",{attrs:{id:"datastream-dataset-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#datastream-dataset-api"}},[a._v("#")]),a._v(" DataStream / DataSet API")]),a._v(" "),e("p",[a._v("Flink API 第二层抽象是 Core APIs。实际上，许多应用程序不需要使用到上述最底层抽象的 API，而是可以使用 Core APIs 进行编程：其中包含 DataStream API（应用于有界/无界数据流场景）和 DataSet API（应用于有界数据集场景）两部分。Core APIs 提供的流式 API（Fluent API）为数据处理提供了通用的模块组件，例如各种形式的用户自定义转换（transformations）、联接（joins）、聚合（aggregations）、窗口（windows）和状态（state）操作等。此层 API 中处理的数据类型在每种编程语言中都有其对应的类。")]),a._v(" "),e("p",[a._v("Process Function 这类底层抽象和 DataStream API 的相互集成使得用户可以选择使用更底层的抽象 API 来实现自己的需求。DataSet API 还额外提供了一些原语，比如循环/迭代（loop/iteration）操作。")]),a._v(" "),e("h3",{attrs:{id:"table-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-api"}},[a._v("#")]),a._v(" Table API")]),a._v(" "),e("p",[a._v("Flink API 第三层抽象是 Table API。Table API 是以表（Table）为中心的声明式编程（DSL）API，例如在流式数据场景下，它可以表示一张正在动态改变的表。Table API 遵循（扩展）关系模型：即表拥有 schema（类似于关系型数据库中的 schema），并且 Table API 也提供了类似于关系模型中的操作，比如 select、project、join、group-by 和 aggregate 等。Table API 程序是以声明的方式定义应执行的逻辑操作，而不是确切地指定程序应该执行的代码。尽管 Table API 使用起来很简洁并且可以由各种类型的用户自定义函数扩展功能，但还是比 Core API 的表达能力差。此外，Table API 程序在执行之前还会使用优化器中的优化规则对用户编写的表达式进行优化。")]),a._v(" "),e("p",[a._v("表和 DataStream/DataSet 可以进行无缝切换，Flink 允许用户在编写应用程序时将 Table API 与 DataStream/DataSet API 混合使用。")]),a._v(" "),e("h3",{attrs:{id:"sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql"}},[a._v("#")]),a._v(" SQL")]),a._v(" "),e("p",[a._v("Flink API 最顶层抽象是 SQL。这层抽象在语义和程序表达式上都类似于 Table API，但是其程序实现都是 SQL 查询表达式。SQL 抽象与 Table API 抽象之间的关联是非常紧密的，并且 SQL 查询语句可以在 Table API 中定义的表上执行。")]),a._v(" "),e("h2",{attrs:{id:"常用api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[a._v("#")]),a._v(" 常用API")]),a._v(" "),e("h3",{attrs:{id:"stream-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream-api"}},[a._v("#")]),a._v(" Stream API")]),a._v(" "),e("h3",{attrs:{id:"batch-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#batch-api"}},[a._v("#")]),a._v(" Batch API")]),a._v(" "),e("h3",{attrs:{id:"window-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-api"}},[a._v("#")]),a._v(" Window API")]),a._v(" "),e("h3",{attrs:{id:"table-api-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-api-2"}},[a._v("#")]),a._v(" Table API")])])}),[],!1,null,null,null);t.default=s.exports}}]);
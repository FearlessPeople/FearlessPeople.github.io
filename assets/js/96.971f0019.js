(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{542:function(a,e,n){"use strict";n.r(e);var t=n(10),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),n("p",[a._v("Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。\nMaven是一个项目管理工具，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。\n所有的项目配置信息都被定义在一个叫做POM.xml的文件中，通过该文件，Maven可以管理项目的整个声明周期，包括编 译，构建，测试，发布，报告等等。\n目前Apache下绝大多数项目都已经采用Maven进行管理。\n而Maven本身还支持多种插件，可以方便更灵活的控制项目 Maven的核心 其实不做什么实际的事情，除了解析一些 XML 文档，管理生命周期与插件之外，它什么也不懂。\nMaven 被设计成将主要的职责委派给一组 Maven 插件，这些插件可以影响 Maven 生命周期，提供对目标的访问。\n")]),a._v(" "),n("h3",{attrs:{id:"maven和ant的比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maven和ant的比较"}},[a._v("#")]),a._v(" Maven和Ant的比较？")]),a._v(" "),n("p",[n("strong",[a._v("Ant")]),a._v("：你需要告诉它做什么，怎么做，做完放哪\n在Ant中，你需要明确告诉它你想让它做什么，需要一步步的告诉它源码在哪，编译完的class文件放哪，然后你还想打成war包\nAnt是显示的调用，它没有约定一个项目一般目录结构，你必须明确的告诉它目录在哪，目录里是什么？\nAnt没有生命周期\n"),n("strong",[a._v("Maven")]),a._v("：\nMaven拥有约定：约定了什么目录放什么\nMaven是声明式的：所有的操作都在pom.xml中，其他的交给maven\nMaven有生命周期：在一个Maven的生命周期中会有一系列的步骤被执行，Maven会运行很多插件的目标。")]),a._v(" "),n("h2",{attrs:{id:"搭建maven开发环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#搭建maven开发环境"}},[a._v("#")]),a._v(" 搭建Maven开发环境")]),a._v(" "),n("p",[a._v("下载Maven： http://maven.apache.org/download.html\n然后解压到一个目录即可")]),a._v(" "),n("h3",{attrs:{id:"配置环境变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置环境变量"}},[a._v("#")]),a._v(" 配置环境变量")]),a._v(" "),n("p",[a._v("添加MAVEN_HOME：maven的安装目录\n然后在path中添加路径到maven的主目录的bin目录下\n例如：MAVEN_HOME：D:\\apache-maven-3.0.3\npath的最前面添加：D:\\apache-maven-3.0.3\\bin;")]),a._v(" "),n("h3",{attrs:{id:"测试安装是否成功"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试安装是否成功"}},[a._v("#")]),a._v(" 测试安装是否成功")]),a._v(" "),n("p",[a._v("打开cmd输入：mvn -v\n显示Apache Maven 3.3.9 版本信息则成功")]),a._v(" "),n("h3",{attrs:{id:"配置maven的本地仓库位置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置maven的本地仓库位置"}},[a._v("#")]),a._v(" 配置Maven的本地仓库位置")]),a._v(" "),n("p",[a._v("所谓本地仓库，就是maven下载的jar存放路径(默认在用户的.m2目录下)\n默认Maven的本地仓库位置一般在c盘的用户目录下，这样会占空间。一般要调整仓库的位置\n打开apache-maven-3.0.3\\conf目录下的settings.xml文件\n找到如下行，在下方添加一行")]),a._v(" "),n("div",{staticClass:"language-xml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- localRepository\n| The path to the local repository maven will use to store artifacts.\n| Default: ~/.m2/repository\n<localRepository>/path/to/local/repo</localRepository>\n--\x3e")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("添加自己的仓库位置")]),a._v(" "),n("div",{staticClass:"language-xml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("localRepository")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("E:/JavaDev/maven/repository"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("localRepository")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("最后还要把刚才设置的 settings.xml文件拷贝到本地仓库E:/JavaDev/maven/repository目录下")]),a._v(" "),n("h2",{attrs:{id:"maven的约定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maven的约定"}},[a._v("#")]),a._v(" Maven的约定")]),a._v(" "),n("p",[a._v("在没有自定义的的情况下：\njava源代码假定是在${basedir}/src/main/java下\n资源配置文件假定是在${basedir}/src/main/resources下\n测试代码假定是在${basedir}/src/test下\n测试使用的资源假定是在${basedir}/src/test/resources下\n编译好的class文件假定是在${basedir}/target/classes下\n生成的jar包和war包假定是在${basedir}/target下\npom.xml文件在${basedir}下")]),a._v(" "),n("h3",{attrs:{id:"maven项目类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maven项目类型"}},[a._v("#")]),a._v(" Maven项目类型：")]),a._v(" "),n("p",[a._v("maven-archetype-j2ee-simple (J2EE 项目)\nmaven-archetype-portlet (门户)\nmaven-archetype-quickstart (一般 Java project)\nmaven-archetype-site (复杂站点)\nmaven-archetype-site-simple (简单站点)\nmaven-archetype-webapp (Java Web 站点)")]),a._v(" "),n("h2",{attrs:{id:"maven的安装目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maven的安装目录"}},[a._v("#")]),a._v(" Maven的安装目录")]),a._v(" "),n("p",[n("strong",[a._v("bin")]),a._v(" ： 该目录包含了mvn运行的脚本，这些脚本用来配置Java命令，准备好classpath和相关的Java系统属性，然后执行Java命令。\n"),n("strong",[a._v("boot")]),a._v(" ： 该目录只包含一个文件， 以 maven 3.0 为例， 该文件为 plexus-classworlds-2.2.3.jar。\n"),n("strong",[a._v("plexus-classworlds")]),a._v(" :是一个类加载器框架，相对于默认的 java 类加载器，它提供了更丰富的语法以方便配置，Maven 使用该框架加载自己的类库\n"),n("strong",[a._v("conf")]),a._v(" ：  该目录包含了一个非常重要的文件settings.xml。\n"),n("strong",[a._v("lib")]),a._v(" ：  该目录包含了所有 Maven 运行时需要的 Java 类库。其其中Maven核心的JAR文件为(maven-"),n("em",[a._v(".")]),a._v("-uber.jar)")])])}),[],!1,null,null,null);e.default=s.exports}}]);